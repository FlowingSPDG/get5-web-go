// This file is generated by gorazor 2.0.1
// DON'T modified manually
// Should edit source file and re-generate: templates/match.gohtml

package templates

import (
	db "github.com/FlowingSPDG/get5-web-go/src/db"
	"github.com/FlowingSPDG/get5-web-go/templates/layout"
	"github.com/sipin/gorazor/gorazor"
	"io"
	"strconv"
	"strings"
)

// Match generates templates/match.gohtml
func Match(u *db.MatchesPageData) string {
	var _b strings.Builder
	RenderMatch(&_b, u)
	return _b.String()
}

// RenderMatch render templates/match.gohtml
func RenderMatch(_buffer io.StringWriter, u *db.MatchesPageData) {

	_body := func(_buffer io.StringWriter) {

	}

	_menu := func(_buffer io.StringWriter) {
		if u.LoggedIn == true {

			_buffer.WriteString("<li><a id=\"mymatches\" href=\"/mymatches\">My Matches</a></li>")

			_buffer.WriteString("<li><a id=\"match_create\" href=\"/match/create\">Create a Match</a></li>")

			_buffer.WriteString("<li><a id=\"myteams\" href=\"/myteams\">My Teams</a></li>")

			_buffer.WriteString("<li><a id=\"team_create\" href=\"/team/create\">Create a Team</a></li>")

			_buffer.WriteString("<li><a id=\"myservers\" href=\"/myservers\">My Servers</a></li>")

			_buffer.WriteString("<li><a id=\"server_create\" href=\"/server/create\">Add a Server</a></li>")

			_buffer.WriteString("<li><a href=\"/logout\">Logout</a></li>")

		} else {

			_buffer.WriteString("<li><a href=\"/login\"><img src=\"/static/img/login_small.png\" height=\"18\"/></a></li>")

		}
	}

	_content := func(_buffer io.StringWriter) {

		_buffer.WriteString("<div id=\"content\">\n\n  <table class=\"table table-striped\">\n    <thead>\n      <tr>\n        <th>Match ID</th>\n        <th>Team 1</th>\n        <th>Team 2</th>\n        <th>Status</th>\n      </tr>\n    </thead>\n    <tbody>\n\t")
		n := u.Matches
		_buffer.WriteString("\n\t")
		for i := 0; i < len(n); i++ {
			id := n[i].ID
			team1id := n[i].Team1ID
			team2id := n[i].Team2ID
			team1name, _ := db.SQLAccess.MySQLGetTeamData(1, "id", strconv.Itoa(int(team1id)))
			team2name, _ := db.SQLAccess.MySQLGetTeamData(1, "id", strconv.Itoa(int(team2id)))
			team1score := strconv.Itoa(n[i].Team1Score)
			team2score := strconv.Itoa(n[i].Team2Score)
			w, _ := db.SQLAccess.MySQLGetTeamData(1, "id", strconv.Itoa(int(n[i].Winner.Int64)))
			var winner db.TeamData
			if len(w) > 0 {
				winner.Name = w[0].Name
			}

			_buffer.WriteString("<tr>\n        <td><a href=\"/match/")
			_buffer.WriteString(gorazor.HTMLEscape(id))
			_buffer.WriteString("\"> ")
			_buffer.WriteString(gorazor.HTMLEscape(id))
			_buffer.WriteString(" </a></td>\n\n        <td>\n          <a href=\"/team/")
			_buffer.WriteString(gorazor.HTMLEscape(team1id))
			_buffer.WriteString("\">")
			_buffer.WriteString(gorazor.HTMLEscape(team1name[0].Name))
			_buffer.WriteString("</a>\n        </td>\n\n        <td>\n          <a href=\"/team/")
			_buffer.WriteString(gorazor.HTMLEscape(team2id))
			_buffer.WriteString("\">")
			_buffer.WriteString(gorazor.HTMLEscape(team2name[0].Name))
			_buffer.WriteString("</a>\n        </td>\n\n        <td>\n          <p>Won ")
			_buffer.WriteString(gorazor.HTMLEscape(winner.Name))
			_buffer.WriteString(" ")
			_buffer.WriteString(gorazor.HTMLEscape(team1score))
			_buffer.WriteString(" : ")
			_buffer.WriteString(gorazor.HTMLEscape(team2score))
			_buffer.WriteString(" by ")
			_buffer.WriteString(gorazor.HTMLEscape(winner.Name))
			_buffer.WriteString("</p>\n        </td>\n      </tr>")

		}
		_buffer.WriteString("\n\n    </tbody>\n  </table>\n\n</div>")

	}

	layout.RenderBase(_buffer, _body, _menu, _content)
}
