@{
	import (
		"github.com/FlowingSPDG/get5-web-go/templates/layout"
		db "github.com/FlowingSPDG/get5-web-go/src/db"
    "strconv"
	)
	var u *db.MatchPageData
	layout := layout.Base
}

@section menu {
	@{
    if u.LoggedIn == true {
		<li><a id="mymatches" href="/mymatches">My Matches</a></li>
        <li><a id="match_create" href="/match/create">Create a Match</a></li>
        <li><a id="myteams" href="/myteams">My Teams</a></li>
        <li><a id="team_create" href="/team/create">Create a Team</a></li>
        <li><a id="myservers" href="/myservers">My Servers</a></li>
        <li><a id="server_create" href="/server/create">Add a Server</a></li>
        <li><a href="/logout">Logout</a></li>
	} else {
		<li><a href="/login"><img src="/static/img/login_small.png" height="18"/></a></li>
	}
  }
}

@section content {
<div id="content">
  <div class="container">
    <h1>
      @{
        team1,_:=u.Match.GetTeam1()
        team2,_:=u.Match.GetTeam2()
        mapstats,_ := u.Match.GetMapStat()
        var timeformat = "2006/01/02 15:04"
      }
      @raw(team1.GetLogoOrFlagHtml(1.0,team2)) <a href="/team/@team1.ID"> @team1.Name</a>
      @u.Match.Team1Score
      @{
        if u.Match.Team1Score < u.Match.Team2Score {
          @raw("<")
        } else if u.Match.Team1Score == u.Match.Team2Score {
          @raw("==")
        } else {
          @raw(">")
        }
      }
      @u.Match.Team2Score
      @raw(team2.GetLogoOrFlagHtml(1.0,team1)) <a href="/team/@team2.ID"> @team2.Name</a>

      @if u.AdminAccess && u.Match.Live() || u.Match.Pending(){
        <div class="dropdown dropdown-header pull-right">
        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
          Admin tools
          <span class="caret"></span>
        </button>
        <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
          if u.Match.Live(){
            <li><a id="pause" href="{{request.path}}/pause">Pause match</a></li>
            <li><a id="unpause" href="{{request.path}}/unpause">Unpause match</a></li>
          }
          <li><a id="addplayer_team1" href="#">Add player to team1</a></li>
          <li><a id="addplayer_team2" href="#">Add player to team2</a></li>
          <li><a id="addplayer_spec" href="#">Add player to specator list</a></li>
          <li><a id="rcon_command" href="#">Send rcon command</a></li>
          <li role="separator" class="divider"></li>
          <li><a id="backup_manager" href="{{request.path}}/backup">Load a backup file</a></li>
          <li><a href="{{request.path}}/cancel">Cancel match</a></li>
        </ul>
      </div>
      }
    </h1>


    <br>
    @{if u.Match.Cancelled{
      <div class="alert alert-danger" role="alert">
      <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
      <span class="sr-only">Error:</span>
        This match has been cancelled.
      </div>
    }}

    @{if u.Match.Forfeit{
      @{loser,_:=u.Match.GetLoser()}
    <div class="alert alert-warning" role="alert">
      <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
      <span class="sr-only">Error:</span>
        This match was forfeit by @loser .
      </div>
    }}


    @{if u.Match.StartTime.Valid {
      @{
        starttime:=u.Match.StartTime.Time.Format(timeformat)
      }
      <p>Started at @starttime</p>
    } else {
      <div class="panel panel-default" role="alert">
      <div class="panel-body">
        This match is pending start.
      </div>
    </div>
    }}


    @{if u.Match.EndTime.Valid {
      @{
        endtime:=u.Match.EndTime.Time.Format(timeformat)
      }
      <p>Ended at @endtime</p>
    }}

    @for i:=0; i < len(mapstats); i++ {
      @{
        mapstat:=mapstats[i]
        mTeam1Score:=strconv.Itoa(mapstats[i].Team1Score)
        mTeam2Score:=strconv.Itoa(mapstats[i].Team2Score)
      }
    <br>
    <div class="panel panel-primary">
      <div class="panel-heading">
        @{
          mapnumber:=mapstat.MapNumber+1
        }
        Map @mapnumber @raw(":") @mapstat.MapName,
        @team1.Name 
        @{
          if u.Match.Team1Score < u.Match.Team2Score {
            @raw("<")
          } else if u.Match.Team1Score == u.Match.Team2Score {
            @raw("==")
          } else {
            @raw(">")
          }
        }
        @team2.Name,
        @mTeam1Score@raw(":")@mTeam2Score
      </div>

      <div class="panel-body">
        <p>Started at @mapstat.StartTime.Time.Format(timeformat)</p>

        @if mapstat.EndTime.Valid{
          <p>Ended at @mapstat.EndTime.Time.Format(timeformat)</p>
        }

        <table class="table table-hover">
          <thead>
            <tr>
              <th>Player</th>
              <th class="text-center">Kills</th>
              <th class="text-center">Deaths</th>
              <th class="text-center">Assists</th>
              <th class="text-center">Flash assists</th>
              <th class="text-center">1v1</th>
              <th class="text-center">1v2</th>
              <th class="text-center">1v3</th>
              <th class="text-center">Rating</th>
              <th class="text-center"><acronym title="Frags per round">FPR</acronym></th>
              <th class="text-center"><acronym title="Average damage per round">ADR</acronym></th>
              <th class="text-center"><acronym title="Headshot percentage">HSP</acronym></th>
            </tr>
          </thead>
          <tbody>
          @{players1,_:=team1.GetPlayers()}
            @for i:=0; i < len(players1); i++ {
              player:=players1[i]
              db.SQLAccess.Gorm.Where("team_id = ? AND match_id = ? AND steam_id = ?",team1.ID,u.Match.ID,player.Steam_id).First(&player)
              if player.Roundsplayed > 0 {
                <tr>
                <td> <a href="@player.GetSteamURL()"> @player.Name </a></td>
                <td class="text-center"> @player.Kills  </td>
                <td class="text-center"> @player.Deaths </td>
                <td class="text-center"> @player.Assists </td>
                <td class="text-center"> @player.Flashbang_assists </td>

                <td class="text-center"> @player.V1 </td>
                <td class="text-center"> @player.V2 </td>
                <td class="text-center"> @player.V3 </td>

                <td class="text-center"> @strconv.Itoa(int(player.GetRating())) </td>
                <td class="text-center"> {{ player.get_fpr() | round(2) }} </td>
                <td class="text-center"> {{ player.get_adr() | round(1) }} </td>
                <td class="text-center"> @strconv.Itoa(int(player.GetHSP())) </td>
              </tr>
              }
          }
          @{players2,_:=team2.GetPlayers()}
            @for i:=0; i < len(players2); i++ {
              player:=players2[i]
              db.SQLAccess.Gorm.Where("team_id = ? AND match_id = ? AND steam_id = ?",team2.ID,u.Match.ID,player.Steam_id).First(&player)
              if player.Roundsplayed > 0 {
                <tr>
                <td> <a href="@player.GetSteamURL()"> @player.Name </a></td>
                <td class="text-center"> @player.Kills  </td>
                <td class="text-center"> @player.Deaths </td>
                <td class="text-center"> @player.Assists </td>
                <td class="text-center"> @player.Flashbang_assists </td>

                <td class="text-center"> @player.V1 </td>
                <td class="text-center"> @player.V2 </td>
                <td class="text-center"> @player.V3 </td>

                <td class="text-center"> @strconv.Itoa(int(player.GetRating())) </td>
                <td class="text-center"> {{ player.get_fpr() | round(2) }} </td>
                <td class="text-center"> {{ player.get_adr() | round(1) }} </td>
                <td class="text-center"> @strconv.Itoa(int(player.GetHSP())) </td>
              </tr>
              }
            }
          </tbody>
        </table>
      </div>
    }
    </div>
  </div>


  <br>
</div>

<script>

jQuery("#addplayer_team1").click(function(e) {
    var input = prompt("Please enter a steamid to add to {{team1.name}}", "");
    if (input != null) {
      window.location.href = "{{request.path}}/adduser?team=team1&auth=" + encodeURIComponent(input);
    }
});

jQuery("#addplayer_team2").click(function(e) {
    var input = prompt("Please enter a steamid to add to {{team2.name}}", "");
    if (input != null) {
      window.location.href = "{{request.path}}/adduser?team=team2&auth=" + encodeURIComponent(input);
    }
});

jQuery("#addplayer_spec").click(function(e) {
    var input = prompt("Please enter a steamid to add to the spectators list", "");
    if (input != null) {
      window.location.href = "{{request.path}}/adduser?team=spec&auth=" + encodeURIComponent(input);
    }
});

jQuery("#rcon_command").click(function(e) {
    var input = prompt("Enter a command to send", "");
    if (input != null) {
      window.location.href = "{{request.path}}/rcon?command=" + encodeURIComponent(input);
    }
});
</script>
}